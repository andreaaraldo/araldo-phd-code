Q = {1 2 3 4};
s = [1 1 2 5];
U = [1 2 2 3];
hmin = [1 300 1500 3500];
hmax = [2 0.011 0.021 0.031];
bar_r_BF = 1;
bar_bar_r_BF = 2;
bar_r_OF = 1;
bar_bar_r_OF = 2;
m_BF = 1;
m_prime_BF = 0.5;
m_OF = 1;
m_prime_OF = 0.5;
Categories_card = 4;
V_card = 2;
O_BF_card = 0;
O_OF_card = 0;
O_LQ_card = 1;
O_HQ_card = 0;
Ishare = 1;
K = 5e+8;
M = 5e+8;
Stot = 0;
Ssingle = 0;
a = [[0 1]];
b = [[0 0]
             [10000 0]];
d = [[0 100]];

// RANGE_INT O [1 ,1]
// RANGE_INT V [1 ,2]
TotalDemandInverse = 0.01;
// RANGE_INT O_BF [0 ,-1]
// RANGE_INT O_F [0 ,-1]
// RANGE_INT O_OF [0 ,-1]
// RANGE_INT O_V [1 ,1]
// RANGE_INT O_LQ [1 ,1]
// RANGE_INT O_HQ [0 ,-1]

// solution (optimal) with objective 200
// Quality Incumbent solution:
// MILP objective                                 2.0000000000e+02
// MILP solution norm |x| (Total, Max)            1.20303e+05  3.00000e+04
// MILP solution error (Ax=b) (Total, Max)        0.00000e+00  0.00000e+00
// MILP x bound error (Total, Max)                0.00000e+00  0.00000e+00
// MILP x integrality error (Total, Max)          0.00000e+00  0.00000e+00
// MILP slack bound error (Total, Max)            0.00000e+00  0.00000e+00
// 

v = [];
w = [];
I = [[[0 0 0 0]
                 [0 1 0 0]]];
l = [[0 1 0 0]];
x = [[[0 0 0 0]
                 [0 1 0 0]]];
y = [[[[0 0]
                     [0 0]]
                 [[0 0]
                     [0 0]]]];
f_usr = [[[[0 0 0 0]
                     [0 0 0 0]]
                 [[0 0 0 0]
                     [0 30000 0 0]]]];
f_src = [[[[0 0 0 0]
                     [0 0 0 0]]
                 [[0 0 0 0]
                     [0 30000 0 0]]]];
y_usr = [[[0 0]
                 [0 30000]]];
y_src = [[[0 0]
                 [0 30000]]];
r = [[0 300]];
z = [];

